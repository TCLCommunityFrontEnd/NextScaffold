{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/local/sdb/Project/NextScaffold/components/CustomComponent.tsx\";\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { connect } from \"../utils/connect\";\nimport zhCN from \"../configs/language/zhCN\";\nimport enUS from \"../configs/language/enUS\";\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport * as zh from 'react-intl/locale-data/zh';\nimport * as en from 'react-intl/locale-data/en';\nimport action from \"../actions/app\";\naddLocaleData([].concat(_toConsumableArray(en), _toConsumableArray(zh)));\n\nfunction chooseLocale(lang) {\n  switch (lang.split('-')[0]) {\n    case 'en':\n      return enUS;\n\n    case 'zh':\n      return zhCN;\n\n    default:\n      return zhCN;\n  }\n}\n\nvar CustomComponent = (_dec = connect(function (state) {\n  var locale = state['app'].locale;\n  return {\n    locale: locale\n  };\n}, function (dispatch) {\n  return {\n    initLocale: function initLocale(locale) {\n      dispatch({\n        type: 'APP_TOGGLE_LOCALE',\n        locale: locale\n      });\n      dispatch(action.loadUserInfo());\n    }\n  };\n}), _dec(_class =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CustomComponent, _React$Component);\n\n  function CustomComponent() {\n    _classCallCheck(this, CustomComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomComponent).apply(this, arguments));\n  }\n\n  _createClass(CustomComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var defaultLocale = localStorage.getItem('tclCloud_lang') || navigator.language;\n      this.props.initLocale(defaultLocale);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          locale = _this$props.locale,\n          children = _this$props.children;\n      return __jsx(IntlProvider, {\n        key: locale,\n        locale: locale,\n        messages: chooseLocale(locale),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, children);\n    }\n  }]);\n\n  return CustomComponent;\n}(React.Component)) || _class);\nexport function withIntl(WrappedComponent) {\n  return (\n    /*#__PURE__*/\n    function (_React$Component2) {\n      _inherits(_class2, _React$Component2);\n\n      function _class2() {\n        _classCallCheck(this, _class2);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(_class2).apply(this, arguments));\n      }\n\n      _createClass(_class2, [{\n        key: \"render\",\n        value: function render() {\n          return __jsx(CustomComponent, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, __jsx(WrappedComponent, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }));\n        }\n      }]);\n\n      return _class2;\n    }(React.Component)\n  );\n}","map":{"version":3,"sources":["/local/sdb/Project/NextScaffold/components/CustomComponent.tsx"],"names":["React","connect","zhCN","enUS","IntlProvider","addLocaleData","zh","en","action","chooseLocale","lang","split","CustomComponent","state","locale","dispatch","initLocale","type","loadUserInfo","defaultLocale","localStorage","getItem","navigator","language","props","children","Component","withIntl","WrappedComponent"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,OAAR;AACA,OAAOC,IAAP;AACA,OAAOC,IAAP;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,YAA5C;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,OAAOC,MAAP;AACAH,aAAa,8BAAKE,EAAL,sBAAYD,EAAZ,GAAb;;AAQA,SAASG,YAAT,CAAuBC,IAAvB,EAA6B;AACzB,UAAQA,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAR;AACA,SAAK,IAAL;AACI,aAAOR,IAAP;;AACJ,SAAK,IAAL;AACI,aAAOD,IAAP;;AACJ;AACI,aAAOA,IAAP;AANJ;AAQH;;IAaKU,e,WAVLX,OAAO,CAAC,UAACY,KAAD,EAAa;AAAA,MACXC,MADW,GACDD,KAAK,CAAC,KAAD,CADJ,CACXC,MADW;AAElB,SAAO;AAACA,IAAAA,MAAM,EAANA;AAAD,GAAP;AACH,CAHO,EAGN,UAACC,QAAD;AAAA,SAAiB;AACfC,IAAAA,UADe,sBACJF,MADI,EACU;AACrBC,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,mBAAN;AAA0BH,QAAAA,MAAM,EAANA;AAA1B,OAAD,CAAR;AACAC,MAAAA,QAAQ,CAACP,MAAM,CAACU,YAAP,EAAD,CAAR;AACH;AAJc,GAAjB;AAAA,CAHM,C;;;;;;;;;;;;;wCAWe;AACf,UAAMC,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,KAAuCC,SAAS,CAACC,QAAvE;AACA,WAAKC,KAAL,CAAWR,UAAX,CAAsBG,aAAtB;AACH;;;6BACO;AAAA,wBACsB,KAAKK,KAD3B;AAAA,UACGV,MADH,eACGA,MADH;AAAA,UACUW,QADV,eACUA,QADV;AAEJ,aACI,MAAC,YAAD;AAAc,QAAA,GAAG,EAAEX,MAAnB;AAA2B,QAAA,MAAM,EAAEA,MAAnC;AAA2C,QAAA,QAAQ,EAAEL,YAAY,CAACK,MAAD,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKW,QADL,CADJ;AAKH;;;;EAZyBzB,KAAK,CAAC0B,S;AAgBpC,OAAO,SAASC,QAAT,CAAkBC,gBAAlB,EAAuC;AAC1C;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,iCACY;AACJ,iBACI,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAiB,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAjB,CADJ;AAGH;AALL;;AAAA;AAAA,MAAqB5B,KAAK,CAAC0B,SAA3B;AAAA;AAOH","sourcesContent":["import * as React from 'react';\nimport {connect} from 'utils/connect';\nimport zhCN from 'configs/language/zhCN';\nimport enUS from 'configs/language/enUS';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport * as zh from 'react-intl/locale-data/zh';\nimport * as en from 'react-intl/locale-data/en';\nimport action from 'actions/app';\naddLocaleData([...en, ...zh]);\n\ninterface CompProps{\n    locale?:string,\n    children?:any,\n    initLocale?:Function\n}\n\nfunction chooseLocale (lang) {\n    switch (lang.split('-')[0]) {\n    case 'en':\n        return enUS;\n    case 'zh':\n        return zhCN;\n    default:\n        return zhCN;\n    }\n}\n\n\n@connect((state:any)=>{\n    const {locale} = state['app'];\n    return {locale};\n},(dispatch:any)=>({\n    initLocale(locale:string){\n        dispatch({type:'APP_TOGGLE_LOCALE',locale});\n        dispatch(action.loadUserInfo());\n    }\n}))\n\nclass CustomComponent extends React.Component<CompProps>{\n    componentDidMount(){\n        const defaultLocale = localStorage.getItem('tclCloud_lang')||navigator.language;\n        this.props.initLocale(defaultLocale);\n    }\n    render(){\n        const {locale,children} = this.props;\n        return (\n            <IntlProvider key={locale} locale={locale} messages={chooseLocale(locale)}>\n                {children}\n            </IntlProvider>\n        )\n    }\n}\n\n\nexport function withIntl(WrappedComponent):any{\n    return class extends React.Component{\n        render(){\n            return (\n                <CustomComponent><WrappedComponent/></CustomComponent>\n            )\n        }\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}