{"ast":null,"code":"var _dec,\n    _class,\n    _jsxFileName = \"/local/sdb/Project/NextScaffold/components/CustomComponent.tsx\";\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { connect } from \"../utils/connect\";\nimport zhCN from \"../configs/language/zhCN\";\nimport enUS from \"../configs/language/enUS\";\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport * as zh from 'react-intl/locale-data/zh';\nimport * as en from 'react-intl/locale-data/en';\nimport action from \"../actions/app\";\naddLocaleData([...en, ...zh]);\n\nfunction chooseLocale(lang) {\n  switch (lang.split('-')[0]) {\n    case 'en':\n      return enUS;\n\n    case 'zh':\n      return zhCN;\n\n    default:\n      return zhCN;\n  }\n}\n\nlet CustomComponent = (_dec = connect(state => {\n  const {\n    locale\n  } = state['app'];\n  return {\n    locale\n  };\n}, dispatch => ({\n  initLocale(locale) {\n    dispatch({\n      type: 'APP_TOGGLE_LOCALE',\n      locale\n    });\n    dispatch(action.loadUserInfo());\n  }\n\n})), _dec(_class = class CustomComponent extends React.Component {\n  componentDidMount() {\n    const defaultLocale = localStorage.getItem('tclCloud_lang') || navigator.language;\n    this.props.initLocale(defaultLocale);\n  }\n\n  render() {\n    const {\n      locale,\n      children\n    } = this.props;\n    return __jsx(IntlProvider, {\n      key: locale,\n      locale: locale,\n      messages: chooseLocale(locale),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, children);\n  }\n\n}) || _class);\nexport function withIntl(WrappedComponent) {\n  return class extends React.Component {\n    render() {\n      return __jsx(CustomComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, __jsx(WrappedComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n\n  };\n}","map":{"version":3,"sources":["/local/sdb/Project/NextScaffold/components/CustomComponent.tsx"],"names":["React","connect","zhCN","enUS","IntlProvider","addLocaleData","zh","en","action","chooseLocale","lang","split","CustomComponent","state","locale","dispatch","initLocale","type","loadUserInfo","Component","componentDidMount","defaultLocale","localStorage","getItem","navigator","language","props","render","children","withIntl","WrappedComponent"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,OAAR;AACA,OAAOC,IAAP;AACA,OAAOC,IAAP;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,YAA5C;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,OAAOC,MAAP;AACAH,aAAa,CAAC,CAAC,GAAGE,EAAJ,EAAQ,GAAGD,EAAX,CAAD,CAAb;;AAQA,SAASG,YAAT,CAAuBC,IAAvB,EAA6B;AACzB,UAAQA,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAR;AACA,SAAK,IAAL;AACI,aAAOR,IAAP;;AACJ,SAAK,IAAL;AACI,aAAOD,IAAP;;AACJ;AACI,aAAOA,IAAP;AANJ;AAQH;;IAaKU,e,WAVLX,OAAO,CAAEY,KAAD,IAAa;AAClB,QAAM;AAACC,IAAAA;AAAD,MAAWD,KAAK,CAAC,KAAD,CAAtB;AACA,SAAO;AAACC,IAAAA;AAAD,GAAP;AACH,CAHO,EAGLC,QAAD,KAAiB;AACfC,EAAAA,UAAU,CAACF,MAAD,EAAe;AACrBC,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAC,mBAAN;AAA0BH,MAAAA;AAA1B,KAAD,CAAR;AACAC,IAAAA,QAAQ,CAACP,MAAM,CAACU,YAAP,EAAD,CAAR;AACH;;AAJc,CAAjB,CAHM,C,gBAAR,MAUMN,eAVN,SAU8BZ,KAAK,CAACmB,SAVpC,CAUwD;AACpDC,EAAAA,iBAAiB,GAAE;AACf,UAAMC,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,KAAuCC,SAAS,CAACC,QAAvE;AACA,SAAKC,KAAL,CAAWV,UAAX,CAAsBK,aAAtB;AACH;;AACDM,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACb,MAAAA,MAAD;AAAQc,MAAAA;AAAR,QAAoB,KAAKF,KAA/B;AACA,WACI,MAAC,YAAD;AAAc,MAAA,GAAG,EAAEZ,MAAnB;AAA2B,MAAA,MAAM,EAAEA,MAAnC;AAA2C,MAAA,QAAQ,EAAEL,YAAY,CAACK,MAAD,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKc,QADL,CADJ;AAKH;;AAZmD,C;AAgBxD,OAAO,SAASC,QAAT,CAAkBC,gBAAlB,EAAuC;AAC1C,SAAO,cAAc9B,KAAK,CAACmB,SAApB,CAA6B;AAChCQ,IAAAA,MAAM,GAAE;AACJ,aACI,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiB,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjB,CADJ;AAGH;;AAL+B,GAApC;AAOH","sourcesContent":["import * as React from 'react';\nimport {connect} from 'utils/connect';\nimport zhCN from 'configs/language/zhCN';\nimport enUS from 'configs/language/enUS';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport * as zh from 'react-intl/locale-data/zh';\nimport * as en from 'react-intl/locale-data/en';\nimport action from 'actions/app';\naddLocaleData([...en, ...zh]);\n\ninterface CompProps{\n    locale?:string,\n    children?:any,\n    initLocale?:Function\n}\n\nfunction chooseLocale (lang) {\n    switch (lang.split('-')[0]) {\n    case 'en':\n        return enUS;\n    case 'zh':\n        return zhCN;\n    default:\n        return zhCN;\n    }\n}\n\n\n@connect((state:any)=>{\n    const {locale} = state['app'];\n    return {locale};\n},(dispatch:any)=>({\n    initLocale(locale:string){\n        dispatch({type:'APP_TOGGLE_LOCALE',locale});\n        dispatch(action.loadUserInfo());\n    }\n}))\n\nclass CustomComponent extends React.Component<CompProps>{\n    componentDidMount(){\n        const defaultLocale = localStorage.getItem('tclCloud_lang')||navigator.language;\n        this.props.initLocale(defaultLocale);\n    }\n    render(){\n        const {locale,children} = this.props;\n        return (\n            <IntlProvider key={locale} locale={locale} messages={chooseLocale(locale)}>\n                {children}\n            </IntlProvider>\n        )\n    }\n}\n\n\nexport function withIntl(WrappedComponent):any{\n    return class extends React.Component{\n        render(){\n            return (\n                <CustomComponent><WrappedComponent/></CustomComponent>\n            )\n        }\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}